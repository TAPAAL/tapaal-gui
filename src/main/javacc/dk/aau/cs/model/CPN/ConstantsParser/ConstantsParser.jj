options {
    STATIC = false;
}
PARSER_BEGIN(ConstantsParser)
package dk.aau.cs.model.CPN.ConstantsParser;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

import dk.aau.cs.model.CPN.Color;
import dk.aau.cs.model.CPN.ColorType;
import dk.aau.cs.model.tapn.Constant;
import dk.aau.cs.model.tapn.TimedArcPetriNet;
import dk.aau.cs.model.CPN.Variable;
import dk.aau.cs.model.tapn.TimedArcPetriNetNetwork;
import dk.aau.cs.model.tapn.TimedPlace;
import dk.aau.cs.model.CPN.Expressions.ArcExpression;
import dk.aau.cs.model.tapn.TimedToken;
import dk.aau.cs.model.CPN.ColorMultiset;

import java.util.HashMap;
import java.util.Map;
import java.util.LinkedHashMap;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import pipe.gui.TAPAALGUI;
import java.util.Set;
import java.util.HashSet;
import dk.aau.cs.model.CPN.ProductType;

public class ConstantsParser {
    private static final Map<String, Constant> constants = new LinkedHashMap<String, Constant>();
    private static final Map<String, ColorType> colorTypes = new LinkedHashMap<String, ColorType>();
    private static final Map<String, Variable> variables = new LinkedHashMap<String, Variable>();
    private static TimedArcPetriNetNetwork network;

    private static class BoolRef {
        public boolean value;

        public BoolRef(boolean value) {
            this.value = value;
        }
    }

    public static boolean parse(String constantsToParse, TimedArcPetriNetNetwork network) throws ParseException, TokenMgrError {
        ConstantsParser.network = network;
        ConstantsParser parser = new ConstantsParser(new StringReader(constantsToParse));
        constants.clear();
        colorTypes.clear();
        variables.clear();

        parser.startParsing();

        List<Constant> constantsList = constants.values()
                                                .stream()
                                                .collect(Collectors.toList());

        List<ColorType> colorTypesList = colorTypes.values()
                                                   .stream()
                                                   .collect(Collectors.toList());
        
        List<Variable> variablesList = variables.values()
                                                .stream()
                                                .collect(Collectors.toList());

        ColorType dot = new ColorType("dot");
        dot.addColor("dot");    
        colorTypesList.add(0, dot);

        Map<String, Object> constantsMap = new HashMap<String, Object>();
        Map<String, Boolean> canBeRemovedBitMap = new HashMap<String, Boolean>();
        Map<String, List<String>> messages = new HashMap<String, List<String>>();        
        
        // Populate maps with constants, color types and variables and if they can be removed
        for (Constant c : network.constants()) {
            constantsMap.put(c.name(), c);
            canBeRemovedBitMap.put(c.name(), !network.getConstantStore().isConstantInUse(c.name()));
        }

        for (ColorType ct : network.colorTypes()) {
            List<String> messagesList = new ArrayList<String>();
            constantsMap.put(ct.getName(), ct);
            canBeRemovedBitMap.put(ct.getName(), network.canColorTypeBeRemoved(ct, messagesList));
            messages.put(ct.getName(), messagesList);
        }

        for (Variable v : network.variables()) {
            List<String> messagesList = new ArrayList<String>();
            constantsMap.put(v.getName(), v);
            boolean canBeEdited = true;
            if (variables.containsKey(v.getName())) {
                ColorType ct = variables.get(v.getName()).getColorType();
                canBeEdited = ct.equals(v.getColorType()) || ct.isIntegerRange();
            }
    
            canBeRemovedBitMap.put(v.getName(), network.canVariableBeRemoved(v, messagesList) && canBeEdited);
            messages.put(v.getName(), messagesList);
        }

        // Generate error messages
        for (String key : canBeRemovedBitMap.keySet()) {
            if (constants.containsKey(key) || 
                variables.containsKey(key) && canBeRemovedBitMap.get(key) ||
                key.equals("dot")) {
                continue;
            } else if (variables.containsKey(key) && !canBeRemovedBitMap.get(key)) {
                boolean skip = false;
                for (Variable v : network.variables()) {
                    if (v.getName().equals(key)) {
                        skip = v.getColorType().equals(variables.get(key).getColorType());
                    }
                }

                if (skip) continue;
            } else if (colorTypes.containsKey(key)) {
                if (colorTypes.get(key).equals(constantsMap.get(key))) continue;

                ColorType newCt = colorTypes.get(key);
                ColorType ct = (ColorType)constantsMap.get(key);

                if (!(ct instanceof ProductType)) {    
                    List<Color> removedColors = new ArrayList<Color>();
                        
                    for (Color color : ct.getColorList()) {
                        if (!newCt.contains(color)) {
                            removedColors.add(color);
                        }
                    }
                    
                    int removeableColors = 0;
                    for (Color c : removedColors) {
                        List<String> newMessagesList = new ArrayList<String>();
                        boolean colorCanBeRemoved = network.canColorBeRemoved(c, newMessagesList);
                        if (colorCanBeRemoved) {
                            ++removeableColors;
                        } else {
                            List<String> messagesList = messages.get(key);
                            messagesList.addAll(newMessagesList);
                            messages.put(key, messagesList);
                        }
                    }

                    // Update place color types
                    for (TimedArcPetriNet tapn : network.allTemplates()) {
                        for (TimedPlace p : tapn.places()) {
                            if (p.getColorType().equals(ct)) {
                                p.setColorType(newCt);
                            }
                            
                            ArcExpression expression = p.getExprWithNewColorType(newCt);
                            if (expression != p.getTokensAsExpression()) {
                                ColorMultiset cm = expression.eval(network.getContext());
                                if (cm != null) {
                                    List<TimedToken> tokensToAdd = new ArrayList<TimedToken>(p.tokens());
                                    for (TimedToken token : cm.getTokens(p)) {
                                        tapn.marking().remove(token);
                                    }

                                    p.updateTokens(tokensToAdd, expression);
                                }
                            }
                        }
                    }
                    
                    if (removeableColors == removedColors.size()) {
                        continue;
                    }
                }
            }

            Object obj = constantsMap.get(key);
            if (!canBeRemovedBitMap.get(key)) {
                String message = "Could not ";
                String title = "Could not ";
                if (obj instanceof ColorType && 
                    colorTypes.containsKey(key) ||
                    obj instanceof Variable &&
                    variables.containsKey(key)) {
                    message += "modify ";
                    title += "modify constant";
                } else {
                    message += "remove ";
                    title += "remove constant";
                }

                if (obj instanceof ColorType) {
                    message += "color type";
                } else if (obj instanceof Variable) {
                    message += "variable"; 
                } else {
                    message += "constant";
                }

                message += " \"" + key + "\"";

                if (!(obj instanceof Constant)) {
                    message += " for the following reasons:  \n\n";
                    message += String.join("\n", messages.get(key));
                } else {
                    message += " because it is in use";
                }

                JOptionPane.showMessageDialog(TAPAALGUI.getApp(), message, title, JOptionPane.WARNING_MESSAGE);

                return false;
            }
        }

        network.getConstantStore().clear();
        network.setConstants(constantsList);
        if (network.isColored()) {
            network.setColorTypes(colorTypesList);
            network.setVariables(variablesList);
        }

        return true;
    }

    private static void idExists(String id) throws ParseException {
        if (id.equals("dot")) {
            throw new ParseException("Name \"dot\" is reserved");
        }

        if (constants.containsKey(id)) {
            throw new ParseException("Constant with name \"" + id + "\" already exists");
        }

        if (colorTypes.containsKey(id)) {
            throw new ParseException("Color type with name \"" + id + "\" already exists");
        }

        if (variables.containsKey(id)) {
            throw new ParseException("Variable with name \"" + id + "\" already exists");
        }
    }
}

PARSER_END(ConstantsParser)

TOKEN :
{
    <SEPARATOR: ";">
    |
    <EQ: "=">
    |
    <COMMA: ",">
    |
    <SBRACKET: "[">
    |
    <EBRACKET: "]">
    |
    <LT: "<">
    |
    <GT: ">">
    |
    <IS: "is">
    |
    <IN: "in">
    |
    <CONST: "const">
    |
    <VAR: "var">
    |
    <TYPE: "type">
    |
    <#ALPHA: ["a"-"z","A"-"Z"]>
    |
    <#ALPHANUM: ["a"-"z","A"-"Z","0"-"9"]>
    |
    <INTEGER: ["0"-"9"] | (["1"-"9"] (["0"-"9"])*)>
    |
    <ID: <ALPHA> ("_" | <ALPHANUM>)*>
}

SKIP :
{
    " "
  | "\t"
  | "\n"
  | "\r"
}

void startParsing() :
{}
{
    (values() <SEPARATOR>)* <EOF>
}

void values() :
{}
{
    constants() | 
    colorTypes() | 
    variables()
}

void constants() :
{
    Token id, value;
}
{
    <CONST> id = <ID> <EQ> value = <INTEGER> { 
        idExists(id.image);
        constants.put(id.image, new Constant(id.image, Integer.parseInt(value.image)));
    }
}

void colorTypes() :
{
    Token id;
    List<String> values = new ArrayList<String>();
    BoolRef isIntList = new BoolRef(false);
    BoolRef isProductList = new BoolRef(false); 
}
{
    <TYPE> id = <ID> <IS> (<SBRACKET> (idList(values) | intList(values, isIntList)) <EBRACKET> | <LT> productList(values, isProductList) <GT>) { 
        ColorType ct = null;
        if (!network.isColored()) {
            throw new ParseException("Color types are not allowed in uncolored networks");
        }

        idExists(id.image);

        if (isProductList.value) {
            ProductType pct = new ProductType(id.image);
            for (String product : values) {
                if (product.equals("dot")) {
                    ColorType dot = new ColorType("dot");
                    dot.addColor("dot");

                    pct.addType(dot);
                    continue;
                }

                if (!colorTypes.containsKey(product)) {
                    throw new ParseException("Color type with name \"" + product + "\" does not exist");
                }

                pct.addType(colorTypes.get(product));
            }

            ct = pct;
        } else if (isIntList.value) {
            ct = new ColorType(id.image);
            int lowerBound = Integer.parseInt(values.get(0));
            int upperBound = Integer.parseInt(values.get(1));
            
            if (lowerBound > upperBound) {
                throw new ParseException("Lower bound must be lowr than or equal to upper bound");
            }

            for (int i = lowerBound; i <= upperBound; ++i) {
                ct.addColor(Integer.toString(i));
            }
        } else {
            ct = new ColorType(id.image);
            Set<String> uniqueVals = new HashSet<String>();
            for (String color : values) {
                if (!isIntList.value && !uniqueVals.add(color)) {
                    throw new ParseException("Color type with name \"" + id.image + "\" contains duplicate colors");
                }
                
                if (color.equals(id.image)) {
                    throw new ParseException("Color type with name \"" + id.image + "\" contains a color with the same name");
                }

                idExists(color);
            }

            ct.addColors(values);
        } 

        colorTypes.put(id.image, ct); 
    }
}

void idList(List<String> values) :
{
    Token id;
}
{
    id = <ID> { values.add(id.image); } 
    (<COMMA> id = <ID> { values.add(id.image); })*
}

void intList(List<String> values, BoolRef isIntList) :
{
    Token val;
}
{
    val = <INTEGER> { values.add(val.image); isIntList.value = true; } 
    (<COMMA> val = <INTEGER> { values.add(val.image); })
}

void productList(List<String> values, BoolRef isProductList) :
{
    Token type;
}
{
    type = <ID> { values.add(type.image); isProductList.value = true; } 
    (<COMMA> type = <ID> { values.add(type.image); })*
}

void variables() :
{
    Token type;
    List<String> ids = new ArrayList<String>();
}
{
    <VAR> idList(ids) <IN> type = <ID> {
        if (!network.isColored()) {
            throw new ParseException("Variables are not allowed in uncolored networks");
        }

        for (String id : ids) {
            idExists(id);
            
            if (type.image.equals("dot")) {
                throw new ParseException("Can not create a variable of color type \"dot\"");
            }

            if (!colorTypes.containsKey(type.image)) {
                throw new ParseException("Color type with name \"" + type.image + "\" does not exist");
            }
            
            variables.put(id, new Variable(id, colorTypes.get(type.image)));
        }
    }
}